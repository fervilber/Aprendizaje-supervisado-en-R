primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
# Añadimos las marcas y etiquetas de las tomas
addCircleMarkers(data = red,group = "Tomas",radius = 6,
color = ~factpal(tomas@data$NAME), stroke = TRUE, fillOpacity = 0.4,
label = tomas@data$NAME,
labelOptions = labelOptions(noHide = T, textOnly = TRUE))
# Crea el mapa de leaflet
leaflet(height="80vh") %>%
# añade fondos al mapa ver posibles en names(providers)
addTiles(group = "Base")  %>%
addProviderTiles(providers$Stamen.TonerLite,group = "Toner") %>%
addProviderTiles(providers$Stamen.Terrain,group = "Terreno")  %>%
# Añadimos un botón de fullsize de ventana de mapa
addFullscreenControl()	%>%
# Añadimos ventana de medición
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
# Añadimos las marcas y etiquetas de las tomas
addCircleMarkers(data = red,group = "Tomas",radius = 6,
color = ~factpal(red@data$NOMBRE_COR), stroke = TRUE, fillOpacity = 0.4,
label = red@data$NOMBRE_COR,
labelOptions = labelOptions(noHide = T, textOnly = TRUE))
leaflet(height="80vh") %>%
# añade fondos al mapa ver posibles en names(providers)
addTiles(group = "Base")  %>%
addProviderTiles(providers$Stamen.TonerLite,group = "Toner") %>%
addProviderTiles(providers$Stamen.Terrain,group = "Terreno")  %>%
# Añadimos un botón de fullsize de ventana de mapa
addFullscreenControl()	%>%
# Añadimos ventana de medición
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
# Añadimos las marcas y etiquetas de las tomas
addCircleMarkers(data = red,group = "Tomas",radius = 6,
label = red@data$NOMBRE_COR,
labelOptions = labelOptions(noHide = T, textOnly = TRUE))
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
getwd()
ruta<-"C:/R/proyectos/INFORMES/talave/docs/docu"
imagenes<-list.files(ruta)
imagenes
limpia<- function (x) gsub('([[:punct:]])|\\s+','_',x);
limpian<- function (x) gsub('ñ','n',x);
imagenes<-list.files(ruta,pattern = ".pdf")
imagenes
imagenes<-list.files(ruta,pattern =c(".pdf",".PDF"))
imagenes
imagenes<-list.files(ruta,pattern =".PDF")
imagenes
getwd()
imagenes<-list.files(ruta,pattern =".pdf", ignore.case=T)
imagenes
length(imagenes)
limpia<- function (x) gsub('([[:punct:]])|\\s+','_',x);
limpian<- function (x) gsub('ñ','n',x);
getwd()
setwd(ruta)
for (i in seq_along(imagenes)){
a<-limpia(substring(imagenes[i],1,nchar(imagenes[i])-4))
a<-limpian(a)
a<- paste(a,".pdf", sep = "")
file.rename(imagenes[i],a)# cambia el nombre de  a 2
}
imagenes<-list.files(ruta,pattern =".pdf", ignore.case=T)
sink("imagenes.rmd") #abro la conexion con el fichero
cat("# cod para insertar las imagenes de un directoio en markdown")
cat("\n") #salto de linea
## Empieza la figura
# hago un loop para todas las subfiguras
for (i in seq_along(imagenes)){
#i<-1
nom<- substring(imagenes[i],1,nchar(imagenes[i])-4)
nom
line<-paste("![", nom," \\label{fig_", i , "}](imgjun2017/", imagenes[i] ,")", sep="")
line
cat(line)
cat("\n")
}
sink()# cierro la conexion
sink("imagenes.rmd") #abro la conexion con el fichero
cat("# cod para insertar listado de enlaces en markdown")
cat("\n") #salto de linea
for (i in seq_along(imagenes)){
#i<-1
nom<- substring(imagenes[i],1,nchar(imagenes[i])-4)
#nom
#line<-paste("![", nom," \\label{fig_", i , "}](imgjun2017/", imagenes[i] ,")", sep="")
line<-paste("  * [", nom,"](docu/", imagenes[i] ,")", sep="")
#line
cat(line)
cat("\n")
}
sink()# cierro la conexion
bookdown::render_book("index.Rmd", "bookdown::gitbook")
getwd()
setwd("C:/R/proyectos/INFORMES/talave/")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
library(sp)
library(leaflet)
library(leaflet.extras)
library(rgdal) # para leer shp
# Leemos las capas del mapa que se encuentran en el directorio de trabajo
rutamap<-paste0(getwd(),"/capas") # ruta de las capas en la carpeta capas
#    tomas<- readOGR(dsn = rutamap,layer = 'Todas_tomas',verbose=FALSE) # verbose es para que no informe de lo que lee en el html final
#     tomas <- tomas[,1] # me quedo solo con la columna 1 del nombre
red<-readOGR(dsn = rutamap,layer = 'tuneltalavecenajo',verbose=FALSE)
head(red)
red<-readOGR(dsn = rutamap,layer = 'tuneltalavecenajo.shp',verbose=FALSE)
rutamap
capa_actuacion <- raster::shapefile("tuneltalavecenajo.shp")
library(rgdal) # para leer shp
capa_actuacion <- raster::shapefile("tuneltalavecenajo.shp")
getwd()
capa_actuacion <- raster::shapefile("/capas/tuneltalavecenajo.shp")
parcelas<-readOGR(dsn = rutamap, layer = '/capas/tuneltalavecenajo.shp',verbose=FALSE)
rutamap
parcelas<-readOGR(dsn = rutamap, layer = 'tuneltalavecenajo.shp',verbose=FALSE)
parcelas<-readOGR(dsn = rutamap, layer = 'tuneltalavecenajo',verbose=FALSE)
head(parcelas)
head(parcelas@data)
leaflet(height="80vh") %>%
# añade fondos al mapa ver posibles en names(providers)
addTiles(group = "Base")  %>%
addProviderTiles(providers$Stamen.TonerLite,group = "Toner") %>%
addProviderTiles(providers$Stamen.Terrain,group = "Terreno")  %>%
# Añadimos un botón de fullsize de ventana de mapa
addFullscreenControl()	%>%
# Añadimos ventana de medición
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
# Añadimos las marcas y etiquetas de las tomas
addCircleMarkers(data = red,group = "Tomas",radius = 6,
label = red@data$NOMBRE_COR,
labelOptions = labelOptions(noHide = T, textOnly = TRUE))  %>%
addPolylines(data = parcelas,group = "Red",label = parcelas@data$Text
)
# Crea el mapa de leaflet
leaflet(height="80vh") %>%
# añade fondos al mapa ver posibles en names(providers)
addTiles(group = "Base")  %>%
addProviderTiles(providers$Stamen.TonerLite,group = "Toner") %>%
addProviderTiles(providers$Stamen.Terrain,group = "Terreno")  %>%
# Añadimos un botón de fullsize de ventana de mapa
addFullscreenControl()	%>%
# Añadimos ventana de medición
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addPolylines(data = parcelas,group = "Red",label = parcelas@data$Text)
# Crea el mapa de leaflet
leaflet(height="80vh") %>%
# añade fondos al mapa ver posibles en names(providers)
addTiles(group = "Base")  %>%
addProviderTiles(providers$Stamen.Terrain,group = "Terreno")  %>%
# Añadimos un botón de fullsize de ventana de mapa
addFullscreenControl()	%>%
# Añadimos ventana de medición
addMeasure(
position = "bottomleft",
primaryLengthUnit = "meters",
primaryAreaUnit = "sqmeters",
activeColor = "#3D535D",
completedColor = "#7D4479") %>%
addPolylines(data = parcelas,group = "Red",label = parcelas@data$Text,
labelOptions = labelOptions(noHide = T, textOnly = TRUE))
getwd()
ktable(head(parcelas@data))
knitr::kable(head(parcelas@data))
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
nom="sahjdhkjhdkjdhksajdh_dasd"
line<-paste("<a href=./", nom, ".pdf target='_blank'>",nom," </a>"
line<-paste("<a href=./", nom, ".pdf target='_blank'>",nom," </a>")
line
line<-paste("<a href=./", nom, ".pdf target='_blank'>",nom," </a>")
line
line<-paste0("<a href=./", nom, ".pdf target='_blank'>",nom," </a>")
line
line<-paste0("<a href=./docu/", nom, ".pdf target='_blank'>",nom," </a>")
line
ruta
imagenes<-list.files(ruta,pattern = ".pdf", ignore.case = T)
sink("imagenes.rmd") #abro la conexion con el fichero
cat("# cod para insertar listado de enlaces en markdown")
cat("\n") #salto de linea
# hago un loop para todas las subfiguras
for (i in seq_along(imagenes)){
#i<-1
nom<- substring(imagenes[i],1,nchar(imagenes[i])-4) # quita expension
line<-paste0("<a href=./docu/", nom, ".pdf target='_blank'>",nom," </a>")
#line
cat(line)
cat("\n")
}
sink()# cierro la conexion
sink("imagenes.rmd") #abro la conexion con el fichero
cat("# cod para insertar listado de enlaces en markdown")
cat("\n") #salto de linea
# hago un loop para todas las subfiguras
for (i in seq_along(imagenes)){
#i<-1
nom<- substring(imagenes[i],1,nchar(imagenes[i])-4) # quita expension
line<-paste0("  * <a href=./docu/", nom, ".pdf target='_blank'>",nom," </a>")
#line
cat(line)
cat("\n")
}
sink()# cierro la conexion
bookdown::render_book("index.Rmd", "bookdown::gitbook")
ruta<-"C:/R/proyectos/INFORMES/talave/imag"
imagenes<-list.files(ruta,pattern =".jpg", ignore.case=T)
imagenes
library(grid)
library(gridExtra)
img1 <-  rasterGrob(as.raster(readJPG("imag/20151118_095137.jpg")), interpolate = FALSE)
img1 <-  rasterGrob(as.raster("imag/20151118_095137.jpg"), interpolate = FALSE)
img2 <-  rasterGrob(as.raster("imag/20151118_095058.jpg"), interpolate = FALSE)
grid.arrange(img1, img2, ncol = 2)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
getwd()
library(knitr)
myimages<-list.files("imag/toma/", pattern = ".jpg", full.names = TRUE)
myimages
myimages<-list.files(".imag/toma/", pattern = ".jpg", full.names = TRUE)
myimages
myimages<-list.files("imag/toma/", pattern = ".jpg", full.names = TRUE)
myimages
bookdown::render_book("index.Rmd", "bookdown::gitbook")
print(pmd1,digits = 10)
pmd1<-sum(presupuesto$certi)
p_PM1<-c(
7761.79,
28130.79,
223486.91,
98247.18 ,
292764.08 ,
347579.02 ,
843312.50 ,
1311427.90 ,
851413.51 ,
2839065.57 ,
1337849.95 ,
1545910.83 ,
1649021.06 ,
4522631.65 ,
6488660.17 ,
4886177.98 ,
4803545.89 ,
3981909.89 ,
533957.67 ,
543263.91 ,
9809761.98 ,
150742.06 )
fecha<-c("Abril 2005",
"Mayo 2005",
"Marzo 2006",
"Abril 2006",
"Mayo 2006",
"Junio 2006",
"Julio 2006",
"Agosto 2006",
"Septiembre 2006",
"Octubre 2006",
"Noviembre 2006",
"Diciembre 2006",
"Enero 2007",
"Febrero 2007",
"Marzo 2007",
"Abril 2007",
"Mayo 2007",
"Junio 2007",
"Julio 2007",
"Agosto 2007",
"Febrero 2008",
"Marzo 2008")
presupuesto<-data.frame(id=1:22,fecha=fecha, certi=p_PM1)
presupuesto$fecha<-paste0("1 ",tolower(presupuesto$fecha))
presupuesto$fecha<-strptime(presupuesto$fecha,"%d %b %Y")
presupuesto$fecha<-as.Date(presupuesto$fecha)
plot(presupuesto$fecha,y=presupuesto$certi/1000000,type='h',
lwd=3, col="lightblue",
main="Certificaciones obra PM1",
xlab="Fecha", ylab = "Importe cert. milones de €")
pmd1<-sum(presupuesto$certi)
print(pmd1,digits = 10)
print(pmd1,digits = 2)
print(pmd1,digits = 10)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
pmd1
print(pmd1,digits = 10)
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
bookdown::render_book("index.Rmd", "bookdown::tufte_html_book")
bookdown::render_book("index.Rmd", "bookdown::tufte_html_book")
knit_with_parameters('C:/R/proyectos/INFORMES/talave/index.Rmd', encoding = 'UTF-8')
bookdown::render_book("index.Rmd", "bookdown::gitbook")
pdf_book(base_format = tufte::tufte_book)
bookdown::pdf_book(base_format = tufte::tufte_book)
bookdown::render_book("index.Rmd", "pdf")
bookdown::render_book("index.Rmd", "bookdown::gitbook")
?md5
install.packages("md5")
library("digest", lib.loc="~/R/win-library/3.3")
digest("Fernando", algo="x11", serialize=FALSE)
digest("Fernando", algo="sha256", serialize=FALSE)
digest("Fernando", algo="murmur32", serialize=FALSE)
library(digest)
pasa_cripto <- function(palabra){
algos <- c("md5","sha1","crc32","sha256","sha512","xxhash32","xxhash64","murmur32")
for (i in seq_along(algos)){
digest(palabra, algo=algos[i], serialize=FALSE)
}
}
pasa_cripto("Fernando")
algos <- c("md5","sha1","crc32","sha256","sha512","xxhash32","xxhash64","murmur32")
algos[2]
digest(palabra, algo=algos[2], serialize=FALSE)
digest("palabra", algo=algos[2], serialize=FALSE)
pasa_cripto <- function(palabra){
algos <- c("md5","sha1","crc32","sha256","sha512","xxhash32","xxhash64","murmur32")
for (i in seq_along(algos)){
print(digest(palabra, algo=algos[i], serialize=FALSE))
}
}
pasa_cripto("Fernando")
pasa_cripto <- function(palabra){
algos <- c("md5","sha1","crc32","sha256","sha512","xxhash32","xxhash64","murmur32")
for (i in seq_along(algos)){
print(paste(algos[i],":  ",digest(palabra, algo=algos[i], serialize=FALSE)))
}
}
pasa_cripto("Fernando")
pasa_cripto("FernandoVillalbaBergado")
pasa_cripto("mesa")
pasa_cripto("meso")
pasa_cripto("en un lugar de la Mancha")
digest("Fernando", algo=algos[2], serialize=TRUE)
digest("Fernando", algo=algos[2], serialize=FALSE)
digest("Fernando", algo=sha1, serialize=FALSE)
digest("Fernando", algo="sha1", serialize=FALSE)
digest("Fernando", algo="sha1", serialize=TRUE)
digest("Fernando!", algo="sha1", serialize=TRUE)
library("bookdown", lib.loc="~/R/R-3.5.2/library")
bookdown::render_book('index.Rmd')
bookdown::render_book('index.Rmd')
bookdown::render_book('index.Rmd')
bookdown::render_book('index.Rmd')
```{r}
# vamos a crear el ejemplo de cero: CREAMOS UNA TABLA DE DATOS
tabla_1<-data.frame(hora=c(8,14,24,8,14,24,8,14,24,8,14,24,8,14,24,8,14,24,24,24))
tabla_1$lugar<-c("casa","restaurante","casa",
"trabajo","trabajo","casa",
"trabajo","trabajo","casa",
"casa","restaurante","casa",
"trabajo","trabajo","casa",
"casa","restaurante","casa","cine","cine")
tabla_1$finde<-c(T,T,T,
F,F,F,
F,F,F,
T,T,T,
F,F,F,
T,T,T,
T,F
)
str(tabla_1)
head(tabla_1)
# vemos como ejemplo el numero de registros de hora según el lugar
table(tabla_1$hora,tabla_1$lugar)
```{r nav2}
# cargamos la librería
library(naivebayes)
install.packages("naivebayes")
# cargamos la librería
library(naivebayes)
# creamos el modelo de pronostico
m <- naive_bayes(lugar ~ hora+finde, data = tabla_1)#, laplace = 1)
# representamos graficamente el modelo
plot(m)
bookdown::render_book('index.Rmd')
install.packages("e1071")
#Cargamos los datos del Titanic dese datasets
data("Titanic")
#Los almacenamos en un data frame
Titanic_df=as.data.frame(Titanic)
str(Titanic_df)
#Creamos una tabla de casos competos a partir de la frecuencia de cada uno
repeating_sequence=rep.int(seq_len(nrow(Titanic_df)), Titanic_df$Freq)
#Creamos una nueva tabla repitiendo los casos según el modelo anterior.
Titanic_dataset=Titanic_df[repeating_sequence,]
#Ya no necesitamos la tabla de frecuencias más.
Titanic_dataset$Freq=NULL
head(Titanic_dataset)
# todo son factores
str(Titanic_dataset)
# Ajustamos un modelo de naive bayes con la librería e1071
m.e1071 <- naiveBayes(Survived ~ ., data = Titanic_dataset)
bookdown::render_book('index.Rmd')
install.packages("caret")
install.packages("randomForest")
options(formatR.arrow=TRUE,width=50) # esto es para mejorar el formato del codigo limita a 50 col de ancho
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
bookdown::render_book('index.Rmd')
require(e1071) # que contiene los datos de ejemplo
# echamos un vistazo a los datos
head(Titanic_data)
data("Titanic") # cargamos los datos ejemplo
# echamos un vistazo a los datos
head(Titanic_data)
datasets()
dataset()
library(help = "datasets")
Titanic
#require(e1071) # que contiene los datos de ejemplo
data("Titanic") # cargamos los datos ejemplo
bookdown::render_book('index.Rmd')
install.packages("pROC")
bookdown::render_book('index.Rmd')
install.packages("rpart.plot")
bookdown::render_book('index.Rmd')
bookdown::render_book('index.Rmd')
bookdown::render_book('index.Rmd')
# cargamos los datos
data("Titanic")
# Transformamos los datos wn una dataframe
Titanic_df=as.data.frame(Titanic)
# Creamos una tabla de casos competos a partir de la frecuencia de cada uno
# Esto repite cada caso el num de veces que se ha dado
# según la frecuencia que está en la columna Freq de la tabla.
repetir_secuencia=rep.int(seq_len(nrow(Titanic_df)), Titanic_df$Freq)
# tenemos una serie con el numero de registro de la tabla original y las veces que se repite # Creamos una nueva tabla repitiendo los casos según el modelo anterior.
Titanic_data=Titanic_df[repetir_secuencia,]
# Ya no necesitamos la columna de frecuencias  y la borramos.
Titanic_data$Freq=NULL
# DIVISION A MANO
# contamos el num de registro de la base de datos del titanic
# calculamos el 75%
num_reg_entrenamiento<-as.integer(0.75*nrow(Titanic_data))
# Creamos una vector de 75% de los registros aleatorio
titanic_train <- sample(nrow(Titanic_data), num_reg_entrenamiento)
# Creamos el conjunto de registros de entrenamiento pasando ese vector a la tabla
d_titanic_train <- Titanic_data[titanic_train,]
# Creamos los datos de comprobación o test (notese el -)
d_titanic_test <- Titanic_data[-titanic_train,]
# Cronstuir un bosque de decisión
library(randomForest)
#creamos el modelo
m <- randomForest(Survived ~ .,
data = d_titanic_train[complete.cases(d_titanic_train),],
ntree = 100    # numero de arboles en el bosque
)
plot(m) # pintamos evolucion de arboles del modelo
# borramos predicciones anteriores
d_titanic_test$pred<-NULL
d_titanic_test$pred_final_60<-NULL
d_titanic_test$pred_final_40<-NULL
# Hacemos las predicciones y las almacenamos en la col p.
d_titanic_test$pred <- predict(m, d_titanic_test)
levels(d_titanic_test$pred)<- c(0,1) # cambiamos los levels como hicimos en apartado 1
# calculamos la bondad de la prediccion
mean(d_titanic_test$pred == d_titanic_test$Survived)
# vemos los datos
head(d_titanic_test,10)
# calculamos la bondad de la prediccion
mean(d_titanic_test$pred == d_titanic_test$Survived)
d_titanic_test
# calculamos la bondad de la prediccion
mean(d_titanic_test$pred == d_titanic_test$Survived)
d_titanic_test$pred
d_titanic_test$Survived
# calculamos la bondad de la prediccion
#  mean(d_titanic_test$pred == d_titanic_test$Survived)
# vemos los datos
head(d_titanic_test,10)
bookdown::render_book('index.Rmd')
bookdown::render_book('index.Rmd')
bookdown::render_book('index.Rmd')
bookdown::render_book('index.Rmd')
bookdown::render_book('index.Rmd')
bookdown::render_book('index.Rmd')
bookdown::render_book('index.Rmd')
bookdown::render_book('index.Rmd')
